      subroutine PCKSPSetKSP(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCKSPGetKSP(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCRedundantSetNumber(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCRedundantSetScatter(a,b,c,z)
      use petsckspdef
       PC a ! PC
       VecScatter b ! VecScatter
       VecScatter c ! VecScatter
       integer z
       end subroutine
      subroutine PCRedundantGetKSP(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCRedundantGetOperators(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       Mat c ! Mat
       integer z
       end subroutine
      subroutine PCFieldSplitSetDiagUseAmat(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFieldSplitGetDiagUseAmat(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFieldSplitSetOffDiagUseAmat(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFieldSplitGetOffDiagUseAmat(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFieldSplitSetBlockSize(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCFieldSplitSetSchurPre(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PCFieldSplitSchurPreType b ! PCFieldSplitSchurPreType
       Mat c ! Mat
       integer z
       end subroutine
      subroutine PCFieldSplitGetSchurPre(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PCFieldSplitSchurPreType b ! PCFieldSplitSchurPreType
       Mat c ! Mat
       integer z
       end subroutine
      subroutine PCFieldSplitSchurGetS(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCFieldSplitSchurRestoreS(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCFieldSplitSetSchurFactType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCFieldSplitSchurFactType b ! PCFieldSplitSchurFactType
       integer z
       end subroutine
      subroutine PCFieldSplitSetSchurScale(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscScalar b ! PetscScalar
       integer z
       end subroutine
      subroutine PCFieldSplitSetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCCompositeType b ! PCCompositeType
       integer z
       end subroutine
      subroutine PCFieldSplitGetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCCompositeType b ! PCCompositeType
       integer z
       end subroutine
      subroutine PCFieldSplitSetDMSplits(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFieldSplitGetDMSplits(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFieldSplitGetDetectSaddlePoint(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFieldSplitSetDetectSaddlePoint(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCRedistributeGetKSP(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCASMSetOverlap(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCASMSetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCASMType b ! PCASMType
       integer z
       end subroutine
      subroutine PCASMGetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCASMType b ! PCASMType
       integer z
       end subroutine
      subroutine PCASMSetLocalType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCCompositeType b ! PCCompositeType
       integer z
       end subroutine
      subroutine PCASMGetLocalType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCCompositeType b ! PCCompositeType
       integer z
       end subroutine
      subroutine PCASMSetSortIndices(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCASMCreateSubdomains2D(a,b,c,d,e,f,g,h,i,z)
      use petsckspdef
       PetscInt a ! PetscInt
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       PetscInt e ! PetscInt
       PetscInt f ! PetscInt
       PetscInt g ! PetscInt
       IS h ! IS
       IS i ! IS
       integer z
       end subroutine
      subroutine PCASMSetDMSubdomains(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCASMGetDMSubdomains(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCASMGetSubMatType(a,b,z)
      use petsckspdef
       PC a ! PC
       MatType b ! MatType
       integer z
       end subroutine
      subroutine PCASMSetSubMatType(a,b,z)
      use petsckspdef
       PC a ! PC
       MatType b ! MatType
       integer z
       end subroutine
      subroutine PCGalerkinSetRestriction(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCGalerkinSetInterpolation(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCGalerkinGetKSP(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCISSetUseStiffnessScaling(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCISSetSubdomainDiagonalScaling(a,b,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       integer z
       end subroutine
      subroutine PCISSetSubdomainScalingFactor(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscScalar b ! PetscScalar
       integer z
       end subroutine
      subroutine PCGASMSetTotalSubdomains(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCGASMSetOverlap(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCGASMSetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCGASMType b ! PCGASMType
       integer z
       end subroutine
      subroutine PCGASMSetSortIndices(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGASMCreateSubdomains2D(a,b,c,d,e,f,g,h,i,j,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       PetscInt e ! PetscInt
       PetscInt f ! PetscInt
       PetscInt g ! PetscInt
       PetscInt h ! PetscInt
       IS i ! IS
       IS j ! IS
       integer z
       end subroutine
      subroutine PCGASMSetUseDMSubdomains(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGASMGetUseDMSubdomains(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFactorSetUpMatSolverType(a,z)
      use petsckspdef
       PC a ! PC
       integer z
       end subroutine
      subroutine PCFactorSetZeroPivot(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCFactorSetShiftType(a,b,z)
      use petsckspdef
       PC a ! PC
       MatFactorShiftType b ! MatFactorShiftType
       integer z
       end subroutine
      subroutine PCFactorSetShiftAmount(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCFactorGetZeroPivot(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCFactorGetShiftAmount(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCFactorGetShiftType(a,b,z)
      use petsckspdef
       PC a ! PC
       MatFactorShiftType b ! MatFactorShiftType
       integer z
       end subroutine
      subroutine PCFactorGetLevels(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCFactorSetLevels(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCFactorSetAllowDiagonalFill(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFactorGetAllowDiagonalFill(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFactorReorderForNonzeroDiagonal(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCFactorSetFill(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCFactorSetUseInPlace(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFactorGetUseInPlace(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFactorSetColumnPivot(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCFactorSetPivotInBlocks(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCFactorSetReuseFill(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCJacobiSetUseAbs(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCJacobiGetUseAbs(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCJacobiSetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCJacobiType b ! PCJacobiType
       integer z
       end subroutine
      subroutine PCJacobiGetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCJacobiType b ! PCJacobiType
       integer z
       end subroutine
      subroutine PCSPAISetEpsilon(a,b,z)
      use petsckspdef
       PC a ! PC
       double precision b ! double
       integer z
       end subroutine
      subroutine PCSPAISetNBSteps(a,b,z)
      use petsckspdef
       PC a ! PC
       integer b ! int
       integer z
       end subroutine
      subroutine PCSPAISetMax(a,b,z)
      use petsckspdef
       PC a ! PC
       integer b ! int
       integer z
       end subroutine
      subroutine PCSPAISetMaxNew(a,b,z)
      use petsckspdef
       PC a ! PC
       integer b ! int
       integer z
       end subroutine
      subroutine PCSPAISetBlockSize(a,b,z)
      use petsckspdef
       PC a ! PC
       integer b ! int
       integer z
       end subroutine
      subroutine PCSPAISetCacheSize(a,b,z)
      use petsckspdef
       PC a ! PC
       integer b ! int
       integer z
       end subroutine
      subroutine PCSPAISetVerbose(a,b,z)
      use petsckspdef
       PC a ! PC
       integer b ! int
       integer z
       end subroutine
      subroutine PCSPAISetSp(a,b,z)
      use petsckspdef
       PC a ! PC
       integer b ! int
       integer z
       end subroutine
      subroutine PCGAMGSetProcEqLim(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCGAMGSetCoarseEqLim(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCGAMGSetRepartition(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGAMGSetReuseInterpolation(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGAMGASMSetUseAggs(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGAMGSetUseParallelCoarseGridSolve(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGAMGSetNlevels(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCGAMGSetThreshold(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscReal b (*) ! PetscReal
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PCGAMGSetThresholdScale(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCGAMGSetNSmooths(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCGAMGSetSymGraph(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGAMGSetSquareGraph(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCCompositeSetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCCompositeType b ! PCCompositeType
       integer z
       end subroutine
      subroutine PCCompositeGetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCCompositeType b ! PCCompositeType
       integer z
       end subroutine
      subroutine PCCompositeSpecialSetAlpha(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscScalar b ! PetscScalar
       integer z
       end subroutine
      subroutine PCCompositeGetNumberPC(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCCompositeGetPC(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PC c ! PC
       integer z
       end subroutine
      subroutine PCSetFromOptions(a,z)
      use petsckspdef
       PC a ! PC
       integer z
       end subroutine
      subroutine PCSetDM(a,b,z)
      use petsckspdef
       PC a ! PC
       DM b ! DM
       integer z
       end subroutine
      subroutine PCGetDM(a,b,z)
      use petsckspdef
       PC a ! PC
       DM b ! DM
       integer z
       end subroutine
      subroutine PCReset(a,z)
      use petsckspdef
       PC a ! PC
       integer z
       end subroutine
      subroutine PCDestroy(a,z)
      use petsckspdef
       PC a ! PC
       integer z
       end subroutine
      subroutine PCSetDiagonalScale(a,b,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       integer z
       end subroutine
      subroutine PCDiagonalScaleLeft(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine PCDiagonalScaleRight(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine PCSetUseAmat(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCSetErrorIfFailure(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGetUseAmat(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCCreate(a,b,z)
      use petsckspdef
       integer a ! MPI_Comm
       PC b ! PC
       integer z
       end subroutine
      subroutine PCApply(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine PCApplySymmetricLeft(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine PCApplySymmetricRight(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine PCApplyTranspose(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine PCApplyTransposeExists(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCApplyBAorAB(a,b,c,d,e,z)
      use petsckspdef
       PC a ! PC
       PCSide b ! PCSide
       Vec c ! Vec
       Vec d ! Vec
       Vec e ! Vec
       integer z
       end subroutine
      subroutine PCApplyBAorABTranspose(a,b,c,d,e,z)
      use petsckspdef
       PC a ! PC
       PCSide b ! PCSide
       Vec c ! Vec
       Vec d ! Vec
       Vec e ! Vec
       integer z
       end subroutine
      subroutine PCApplyRichardsonExists(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCApplyRichardson(a,b,c,d,e,f,g,h,i,j,k,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       Vec d ! Vec
       PetscReal e ! PetscReal
       PetscReal f ! PetscReal
       PetscReal g ! PetscReal
       PetscInt h ! PetscInt
       PetscBool i ! PetscBool
       PetscInt j ! PetscInt
       PCRichardsonConvergedReason k ! PCRichardsonConvergedReason
       integer z
       end subroutine
      subroutine PCGetSetUpFailedReason(a,b,z)
      use petsckspdef
       PC a ! PC
       PCFailedReason b ! PCFailedReason
       integer z
       end subroutine
      subroutine PCSetUp(a,z)
      use petsckspdef
       PC a ! PC
       integer z
       end subroutine
      subroutine PCSetUpOnBlocks(a,z)
      use petsckspdef
       PC a ! PC
       integer z
       end subroutine
      subroutine PCSetOperators(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       Mat c ! Mat
       integer z
       end subroutine
      subroutine PCSetReusePreconditioner(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGetReusePreconditioner(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCGetOperators(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       Mat c ! Mat
       integer z
       end subroutine
      subroutine PCFactorGetMatrix(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCPreSolve(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCPostSolve(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCComputeExplicitOperator(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCSetCoordinates(a,b,c,d,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscReal d ! PetscReal
       integer z
       end subroutine
      subroutine PCExoticSetType(a,b,z)
      use petsckspdef
       PC a ! PC
       PCExoticType b ! PCExoticType
       integer z
       end subroutine
      subroutine PCPARMSSetGlobal(a,b,z)
      use petsckspdef
       PC a ! PC
       PCPARMSGlobalType b ! PCPARMSGlobalType
       integer z
       end subroutine
      subroutine PCPARMSSetLocal(a,b,z)
      use petsckspdef
       PC a ! PC
       PCPARMSLocalType b ! PCPARMSLocalType
       integer z
       end subroutine
      subroutine PCPARMSSetSolveTolerances(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PCPARMSSetSolveRestart(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCPARMSSetNonsymPerm(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCPARMSSetFill(a,b,c,d,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PCTelescopeGetKSP(a,b,z)
      use petsckspdef
       PC a ! PC
       KSP b ! KSP
       integer z
       end subroutine
      subroutine PCTelescopeGetReductionFactor(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCTelescopeSetReductionFactor(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCTelescopeGetIgnoreDM(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCTelescopeSetIgnoreDM(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCTelescopeGetIgnoreKSPComputeOperators(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCTelescopeSetIgnoreKSPComputeOperators(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCTelescopeGetDM(a,b,z)
      use petsckspdef
       PC a ! PC
       DM b ! DM
       integer z
       end subroutine
      subroutine PCTelescopeSetSubcommType(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscSubcommType b ! PetscSubcommType
       integer z
       end subroutine
      subroutine PCTelescopeGetSubcommType(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscSubcommType b ! PetscSubcommType
       integer z
       end subroutine
      subroutine PCBJacobiSetTotalBlocks(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       integer z
       end subroutine
      subroutine PCBJacobiSetLocalBlocks(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       integer z
       end subroutine
      subroutine PCSORGetSymmetric(a,b,z)
      use petsckspdef
       PC a ! PC
       MatSORType b ! MatSORType
       integer z
       end subroutine
      subroutine PCSORGetOmega(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCSORGetIterations(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PCSORSetSymmetric(a,b,z)
      use petsckspdef
       PC a ! PC
       MatSORType b ! MatSORType
       integer z
       end subroutine
      subroutine PCSORSetOmega(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCSORSetIterations(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PCHYPRESetDiscreteGradient(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCHYPRESetDiscreteCurl(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCHYPRESetInterpolations(a,b,c,d,e,f,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       Mat c ! Mat
       Mat d (*) ! Mat
       Mat e ! Mat
       Mat f (*) ! Mat
       integer z
       end subroutine
      subroutine PCHYPRESetAlphaPoissonMatrix(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCHYPRESetBetaPoissonMatrix(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCHYPRESetEdgeConstantVectors(a,b,c,d,z)
      use petsckspdef
       PC a ! PC
       Vec b ! Vec
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine PCFactorSetReuseOrdering(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCLMVMSetMatLMVM(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCLMVMGetMatLMVM(a,b,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       integer z
       end subroutine
      subroutine PCLMVMSetIS(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCLMVMClearIS(a,z)
      use petsckspdef
       PC a ! PC
       integer z
       end subroutine
      subroutine PCEisenstatSetOmega(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCEisenstatSetNoDiagonalScaling(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCEisenstatGetOmega(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine PCEisenstatGetNoDiagonalScaling(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PCBDDCSetDiscreteGradient(a,b,c,d,e,f,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       PetscBool e ! PetscBool
       PetscBool f ! PetscBool
       integer z
       end subroutine
      subroutine PCBDDCSetDivergenceMat(a,b,c,d,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       PetscBool c ! PetscBool
       IS d ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetChangeOfBasisMat(a,b,c,z)
      use petsckspdef
       PC a ! PC
       Mat b ! Mat
       PetscBool c ! PetscBool
       integer z
       end subroutine
      subroutine PCBDDCSetPrimalVerticesIS(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCGetPrimalVerticesIS(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetPrimalVerticesLocalIS(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCGetPrimalVerticesLocalIS(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetCoarseningRatio(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCBDDCSetLevels(a,b,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PCBDDCSetDirichletBoundaries(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetDirichletBoundariesLocal(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetNeumannBoundaries(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetNeumannBoundariesLocal(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCGetDirichletBoundaries(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCGetDirichletBoundariesLocal(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCGetNeumannBoundaries(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCGetNeumannBoundariesLocal(a,b,z)
      use petsckspdef
       PC a ! PC
       IS b ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetLocalAdjacencyGraph(a,b,c,d,e,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       PetscInt d (*) ! PetscInt
       PetscCopyMode e ! PetscCopyMode
       integer z
       end subroutine
      subroutine PCBDDCSetDofsSplittingLocal(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       IS c (*) ! IS
       integer z
       end subroutine
      subroutine PCBDDCSetDofsSplitting(a,b,c,z)
      use petsckspdef
       PC a ! PC
       PetscInt b ! PetscInt
       IS c (*) ! IS
       integer z
       end subroutine
      subroutine PCBDDCMatFETIDPGetRHS(a,b,c,z)
      use petsckspdef
       Mat a ! Mat
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine PCBDDCMatFETIDPGetSolution(a,b,c,z)
      use petsckspdef
       Mat a ! Mat
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
