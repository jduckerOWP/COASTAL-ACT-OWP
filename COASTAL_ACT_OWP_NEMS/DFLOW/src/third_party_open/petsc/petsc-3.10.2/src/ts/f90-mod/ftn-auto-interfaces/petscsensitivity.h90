      subroutine TSGetCostIntegral(a,b,z)
      use petsctsdef
       TS a ! TS
       Vec b ! Vec
       integer z
       end subroutine
      subroutine TSComputeCostIntegrand(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscReal b ! PetscReal
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine TSComputeDRDYFunction(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscReal b ! PetscReal
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine TSComputeDRDPFunction(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscReal b ! PetscReal
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine TSSetCostGradients(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine TSGetCostGradients(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine TSAdjointSetUp(a,z)
      use petsctsdef
       TS a ! TS
       integer z
       end subroutine
      subroutine TSAdjointSetSteps(a,b,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine TSAdjointComputeDRDYFunction(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscReal b ! PetscReal
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine TSAdjointComputeDRDPFunction(a,b,c,d,z)
      use petsctsdef
       TS a ! TS
       PetscReal b ! PetscReal
       Vec c ! Vec
       Vec d ! Vec
       integer z
       end subroutine
      subroutine TSAdjointStep(a,z)
      use petsctsdef
       TS a ! TS
       integer z
       end subroutine
      subroutine TSAdjointSolve(a,z)
      use petsctsdef
       TS a ! TS
       integer z
       end subroutine
      subroutine TSAdjointCostIntegral(a,z)
      use petsctsdef
       TS a ! TS
       integer z
       end subroutine
      subroutine TSForwardSetUp(a,z)
      use petsctsdef
       TS a ! TS
       integer z
       end subroutine
      subroutine TSForwardSetIntegralGradients(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       integer z
       end subroutine
      subroutine TSForwardGetIntegralGradients(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Vec c ! Vec
       integer z
       end subroutine
      subroutine TSForwardStep(a,z)
      use petsctsdef
       TS a ! TS
       integer z
       end subroutine
      subroutine TSForwardSetSensitivities(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Mat c ! Mat
       integer z
       end subroutine
      subroutine TSForwardGetSensitivities(a,b,c,z)
      use petsctsdef
       TS a ! TS
       PetscInt b ! PetscInt
       Mat c ! Mat
       integer z
       end subroutine
      subroutine TSForwardCostIntegral(a,z)
      use petsctsdef
       TS a ! TS
       integer z
       end subroutine
