      subroutine ISBlockSetIndices(a,b,c,d,e,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d (*) ! PetscInt
       PetscCopyMode e ! PetscCopyMode
       integer z
       end subroutine
      subroutine ISCreateBlock(a,b,c,d,e,f,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d (*) ! PetscInt
       PetscCopyMode e ! PetscCopyMode
       IS f ! IS
       integer z
       end subroutine
      subroutine ISBlockGetLocalSize(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISBlockGetSize(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionCreate(a,b,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscSection b ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionCopy(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscSection b ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionClone(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscSection b ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionCompare(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscSection b ! PetscSection
       PetscBool c ! PetscBool
       integer z
       end subroutine
      subroutine PetscSectionGetNumFields(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetNumFields(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetFieldComponents(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetFieldComponents(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetChart(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetChart(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetPermutation(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       IS b ! IS
       integer z
       end subroutine
      subroutine PetscSectionSetPermutation(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       IS b ! IS
       integer z
       end subroutine
      subroutine PetscSectionGetDof(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetDof(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionAddDof(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetFieldDof(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetFieldDof(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionAddFieldDof(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetConstraintDof(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetConstraintDof(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionAddConstraintDof(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetFieldConstraintDof(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetFieldConstraintDof(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionAddFieldConstraintDof(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetUp(a,z)
      use petscvecdef
       PetscSection a ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionGetMaxDof(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetStorageSize(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetConstrainedStorageSize(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionCreateGlobalSection(a,b,c,d,e,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscSF b ! PetscSF
       PetscBool c ! PetscBool
       PetscBool d ! PetscBool
       PetscSection e ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionCreateGlobalSectionCensored(a,b,c,d,e,f,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscSF b ! PetscSF
       PetscBool c ! PetscBool
       PetscInt d ! PetscInt
       PetscInt e (*) ! PetscInt
       PetscSection f ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionGetValueLayout(a,b,c,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscSection b ! PetscSection
       PetscLayout c ! PetscLayout
       integer z
       end subroutine
      subroutine PetscSectionGetOffset(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetOffset(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetFieldOffset(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionSetFieldOffset(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionGetOffsetRange(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscSectionReset(a,z)
      use petscvecdef
       PetscSection a ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionDestroy(a,z)
      use petscvecdef
       PetscSection a ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionPermute(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       IS b ! IS
       PetscSection c ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionSetClosureIndex(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscObject b ! PetscObject
       PetscSection c ! PetscSection
       IS d ! IS
       integer z
       end subroutine
      subroutine PetscSectionGetClosureIndex(a,b,c,d,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscObject b ! PetscObject
       PetscSection c ! PetscSection
       IS d ! IS
       integer z
       end subroutine
      subroutine PetscSectionSetClosurePermutation(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscObject b ! PetscObject
       IS c ! IS
       integer z
       end subroutine
      subroutine PetscSectionGetClosurePermutation(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscObject b ! PetscObject
       IS c ! IS
       integer z
       end subroutine
      subroutine PetscSectionGetClosureInversePermutation(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscObject b ! PetscObject
       IS c ! IS
       integer z
       end subroutine
      subroutine PetscSectionGetField(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscSection c ! PetscSection
       integer z
       end subroutine
      subroutine PetscSectionSymCreate(a,b,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscSectionSym b ! PetscSectionSym
       integer z
       end subroutine
      subroutine PetscSectionSymDestroy(a,z)
      use petscvecdef
       PetscSectionSym a ! PetscSectionSym
       integer z
       end subroutine
      subroutine PetscSectionSetSym(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscSectionSym b ! PetscSectionSym
       integer z
       end subroutine
      subroutine PetscSectionGetSym(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscSectionSym b ! PetscSectionSym
       integer z
       end subroutine
      subroutine PetscSectionSetFieldSym(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscSectionSym c ! PetscSectionSym
       integer z
       end subroutine
      subroutine PetscSectionGetFieldSym(a,b,c,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscInt b ! PetscInt
       PetscSectionSym c ! PetscSectionSym
       integer z
       end subroutine
      subroutine PetscSectionGetUseFieldOffsets(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PetscSectionSetUseFieldOffsets(a,b,z)
      use petscvecdef
       PetscSection a ! PetscSection
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine PetscLayoutCreate(a,b,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscLayout b ! PetscLayout
       integer z
       end subroutine
      subroutine PetscLayoutDestroy(a,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       integer z
       end subroutine
      subroutine PetscLayoutSetUp(a,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       integer z
       end subroutine
      subroutine PetscLayoutDuplicate(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscLayout b ! PetscLayout
       integer z
       end subroutine
      subroutine PetscLayoutReference(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscLayout b ! PetscLayout
       integer z
       end subroutine
      subroutine PetscLayoutSetISLocalToGlobalMapping(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       ISLocalToGlobalMapping b ! ISLocalToGlobalMapping
       integer z
       end subroutine
      subroutine PetscLayoutSetLocalSize(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscLayoutSetSize(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscLayoutGetSize(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscLayoutSetBlockSize(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscLayoutGetBlockSize(a,b,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine PetscLayoutGetRange(a,b,c,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine PetscLayoutCompare(a,b,c,z)
      use petscvecdef
       PetscLayout a ! PetscLayout
       PetscLayout b ! PetscLayout
       PetscBool c ! PetscBool
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingDuplicate(a,b,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       ISLocalToGlobalMapping b ! ISLocalToGlobalMapping
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingGetSize(a,b,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingCreateIS(a,b,z)
      use petscvecdef
       IS a ! IS
       ISLocalToGlobalMapping b ! ISLocalToGlobalMapping
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingSetBlockSize(a,b,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingGetBlockSize(a,b,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingCreate(a,b,c,d,e,f,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d (*) ! PetscInt
       PetscCopyMode e ! PetscCopyMode
       ISLocalToGlobalMapping f ! ISLocalToGlobalMapping
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingSetFromOptions(a,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingDestroy(a,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingApplyIS(a,b,c,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       IS b ! IS
       IS c ! IS
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingApply(a,b,c,d,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       PetscInt d (*) ! PetscInt
       integer z
       end subroutine
      subroutine ISLocalToGlobalMappingApplyBlock(a,b,c,d,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       PetscInt d (*) ! PetscInt
       integer z
       end subroutine
      subroutine ISGlobalToLocalMappingApply(a,b,c,d,e,f,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       ISGlobalToLocalMappingMode b ! ISGlobalToLocalMappingMode
       PetscInt c ! PetscInt
       PetscInt d (*) ! PetscInt
       PetscInt e ! PetscInt
       PetscInt f (*) ! PetscInt
       integer z
       end subroutine
      subroutine ISGlobalToLocalMappingApplyIS(a,b,c,d,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       ISGlobalToLocalMappingMode b ! ISGlobalToLocalMappingMode
       IS c ! IS
       IS d ! IS
       integer z
       end subroutine
      subroutine ISGlobalToLocalMappingApplyBlock(a,b,c,d,e,f,z)
      use petscvecdef
       ISLocalToGlobalMapping a ! ISLocalToGlobalMapping
       ISGlobalToLocalMappingMode b ! ISGlobalToLocalMappingMode
       PetscInt c ! PetscInt
       PetscInt d (*) ! PetscInt
       PetscInt e ! PetscInt
       PetscInt f (*) ! PetscInt
       integer z
       end subroutine
      subroutine ISCreateGeneral(a,b,c,d,e,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       PetscCopyMode d ! PetscCopyMode
       IS e ! IS
       integer z
       end subroutine
      subroutine ISGeneralSetIndices(a,b,c,d,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       PetscCopyMode d ! PetscCopyMode
       integer z
       end subroutine
      subroutine ISColoringDestroy(a,z)
      use petscvecdef
       ISColoring a ! ISColoring
       integer z
       end subroutine
      subroutine ISColoringCreate(a,b,c,d,e,f,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       ISColoringValue d (*) ! ISColoringValue
       PetscCopyMode e ! PetscCopyMode
       ISColoring f ! ISColoring
       integer z
       end subroutine
      subroutine ISBuildTwoSided(a,b,c,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       IS c ! IS
       integer z
       end subroutine
      subroutine ISPartitioningToNumbering(a,b,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       integer z
       end subroutine
      subroutine ISPartitioningCount(a,b,c,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       integer z
       end subroutine
      subroutine ISAllGather(a,b,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       integer z
       end subroutine
      subroutine ISComplement(a,b,c,d,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       IS d ! IS
       integer z
       end subroutine
      subroutine ISDifference(a,b,c,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       IS c ! IS
       integer z
       end subroutine
      subroutine ISSum(a,b,c,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       IS c ! IS
       integer z
       end subroutine
      subroutine ISExpand(a,b,c,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       IS c ! IS
       integer z
       end subroutine
      subroutine ISIntersect(a,b,c,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       IS c ! IS
       integer z
       end subroutine
      subroutine ISConcatenate(a,b,c,d,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       IS c (*) ! IS
       IS d ! IS
       integer z
       end subroutine
      subroutine ISListToPair(a,b,c,d,e,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       IS c (*) ! IS
       IS d ! IS
       IS e ! IS
       integer z
       end subroutine
      subroutine ISPairToList(a,b,c,d,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       PetscInt c ! PetscInt
       IS d ! IS
       integer z
       end subroutine
      subroutine ISEmbed(a,b,c,d,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       PetscBool c ! PetscBool
       IS d ! IS
       integer z
       end subroutine
      subroutine ISSortPermutation(a,b,c,z)
      use petscvecdef
       IS a ! IS
       PetscBool b ! PetscBool
       IS c ! IS
       integer z
       end subroutine
      subroutine ISCompressIndicesGeneral(a,b,c,d,e,f,z)
      use petscvecdef
       PetscInt a ! PetscInt
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       IS e (*) ! IS
       IS f (*) ! IS
       integer z
       end subroutine
      subroutine ISEqual(a,b,c,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       PetscBool c ! PetscBool
       integer z
       end subroutine
      subroutine ISEqualUnsorted(a,b,c,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       PetscBool c ! PetscBool
       integer z
       end subroutine
      subroutine ISStrideGetInfo(a,b,c,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine ISStrideSetStride(a,b,c,d,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine ISCreateStride(a,b,c,d,e,z)
      use petscvecdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       IS e ! IS
       integer z
       end subroutine
      subroutine ISRenumber(a,b,c,d,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       PetscInt c ! PetscInt
       IS d ! IS
       integer z
       end subroutine
      subroutine ISIdentity(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine ISSetIdentity(a,z)
      use petscvecdef
       IS a ! IS
       integer z
       end subroutine
      subroutine ISContiguousLocal(a,b,c,d,e,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       PetscBool e ! PetscBool
       integer z
       end subroutine
      subroutine ISPermutation(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine ISSetPermutation(a,z)
      use petscvecdef
       IS a ! IS
       integer z
       end subroutine
      subroutine ISDestroy(a,z)
      use petscvecdef
       IS a ! IS
       integer z
       end subroutine
      subroutine ISInvertPermutation(a,b,c,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       IS c ! IS
       integer z
       end subroutine
      subroutine ISGetSize(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISGetLocalSize(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISLocate(a,b,c,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine ISGetNonlocalIS(a,b,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       integer z
       end subroutine
      subroutine ISRestoreNonlocalIS(a,b,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       integer z
       end subroutine
      subroutine ISLoad(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscViewer b ! PetscViewer
       integer z
       end subroutine
      subroutine ISSort(a,z)
      use petscvecdef
       IS a ! IS
       integer z
       end subroutine
      subroutine ISSortRemoveDups(a,z)
      use petscvecdef
       IS a ! IS
       integer z
       end subroutine
      subroutine ISToGeneral(a,z)
      use petscvecdef
       IS a ! IS
       integer z
       end subroutine
      subroutine ISSorted(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine ISDuplicate(a,b,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       integer z
       end subroutine
      subroutine ISCopy(a,b,z)
      use petscvecdef
       IS a ! IS
       IS b ! IS
       integer z
       end subroutine
      subroutine ISOnComm(a,b,c,d,z)
      use petscvecdef
       IS a ! IS
       integer b ! MPI_Comm
       PetscCopyMode c ! PetscCopyMode
       IS d ! IS
       integer z
       end subroutine
      subroutine ISSetBlockSize(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISGetBlockSize(a,b,z)
      use petscvecdef
       IS a ! IS
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine ISCreate(a,b,z)
      use petscvecdef
       integer a ! MPI_Comm
       IS b ! IS
       integer z
       end subroutine
