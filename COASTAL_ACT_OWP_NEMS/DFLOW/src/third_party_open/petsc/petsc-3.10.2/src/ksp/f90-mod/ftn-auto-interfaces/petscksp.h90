      subroutine MatCreateSchurComplement(a,b,c,d,e,f,z)
      use petsckspdef
       Mat a ! Mat
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       Mat e ! Mat
       Mat f ! Mat
       integer z
       end subroutine
      subroutine MatSchurComplementSetSubMatrices(a,b,c,d,e,f,z)
      use petsckspdef
       Mat a ! Mat
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       Mat e ! Mat
       Mat f ! Mat
       integer z
       end subroutine
      subroutine MatSchurComplementGetKSP(a,b,z)
      use petsckspdef
       Mat a ! Mat
       KSP b ! KSP
       integer z
       end subroutine
      subroutine MatSchurComplementSetKSP(a,b,z)
      use petsckspdef
       Mat a ! Mat
       KSP b ! KSP
       integer z
       end subroutine
      subroutine MatSchurComplementUpdateSubMatrices(a,b,c,d,e,f,z)
      use petsckspdef
       Mat a ! Mat
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       Mat e ! Mat
       Mat f ! Mat
       integer z
       end subroutine
      subroutine MatSchurComplementComputeExplicitOperator(a,b,z)
      use petsckspdef
       Mat a ! Mat
       Mat b ! Mat
       integer z
       end subroutine
      subroutine MatGetSchurComplement(a,b,c,d,e,f,g,h,i,j,z)
      use petsckspdef
       Mat a ! Mat
       IS b ! IS
       IS c ! IS
       IS d ! IS
       IS e ! IS
       MatReuse f ! MatReuse
       Mat g ! Mat
       MatSchurComplementAinvType h ! MatSchurComplementAinvType
       MatReuse i ! MatReuse
       Mat j ! Mat
       integer z
       end subroutine
      subroutine MatSchurComplementSetAinvType(a,b,z)
      use petsckspdef
       Mat a ! Mat
       MatSchurComplementAinvType b ! MatSchurComplementAinvType
       integer z
       end subroutine
      subroutine MatSchurComplementGetAinvType(a,b,z)
      use petsckspdef
       Mat a ! Mat
       MatSchurComplementAinvType b ! MatSchurComplementAinvType
       integer z
       end subroutine
      subroutine MatCreateSchurComplementPmat(a,b,c,d,e,f,g,z)
      use petsckspdef
       Mat a ! Mat
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       MatSchurComplementAinvType e ! MatSchurComplementAinvType
       MatReuse f ! MatReuse
       Mat g ! Mat
       integer z
       end subroutine
      subroutine MatSchurComplementGetPmat(a,b,c,z)
      use petsckspdef
       Mat a ! Mat
       MatReuse b ! MatReuse
       Mat c ! Mat
       integer z
       end subroutine
      subroutine KSPChebyshevSetEigenvalues(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       PetscReal c ! PetscReal
       integer z
       end subroutine
      subroutine KSPChebyshevEstEigSet(a,b,c,d,e,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       PetscReal c ! PetscReal
       PetscReal d ! PetscReal
       PetscReal e ! PetscReal
       integer z
       end subroutine
      subroutine KSPChebyshevEstEigSetUseNoisy(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPChebyshevEstEigGetKSP(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSP b ! KSP
       integer z
       end subroutine
      subroutine MatCreateLMVMDiagBrdn(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine MatCreateLMVMSR1(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine KSPFETIDPSetPressureOperator(a,b,z)
      use petsckspdef
       KSP a ! KSP
       Mat b ! Mat
       integer z
       end subroutine
      subroutine KSPFETIDPGetInnerKSP(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSP b ! KSP
       integer z
       end subroutine
      subroutine KSPFETIDPGetInnerBDDC(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PC b ! PC
       integer z
       end subroutine
      subroutine KSPFETIDPSetInnerBDDC(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PC b ! PC
       integer z
       end subroutine
      subroutine KSPQCGSetTrustRegionRadius(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPQCGGetTrialStepNorm(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPQCGGetQuadratic(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPPIPEFGMRESSetShift(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscScalar b ! PetscScalar
       integer z
       end subroutine
      subroutine KSPCGSetType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPCGType b ! KSPCGType
       integer z
       end subroutine
      subroutine KSPCGUseSingleReduction(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPCGSetRadius(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPCGGetNormD(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPCGGetObjFcn(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPInitialResidual(a,b,c,d,e,f,z)
      use petsckspdef
       KSP a ! KSP
       Vec b ! Vec
       Vec c ! Vec
       Vec d ! Vec
       Vec e ! Vec
       Vec f ! Vec
       integer z
       end subroutine
      subroutine KSPUnwindPreconditioner(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine KSPGetTabLevel(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPSetTabLevel(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPSetUseFischerGuess(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine KSPSetGuess(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPGuess b ! KSPGuess
       integer z
       end subroutine
      subroutine KSPGetGuess(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPGuess b ! KSPGuess
       integer z
       end subroutine
      subroutine KSPSetFromOptions(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPResetFromOptions(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPSetNormType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPNormType b ! KSPNormType
       integer z
       end subroutine
      subroutine KSPSetCheckNormIteration(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPSetLagNorm(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetSupportedNorm(a,b,c,d,z)
      use petsckspdef
       KSP a ! KSP
       KSPNormType b ! KSPNormType
       PCSide c ! PCSide
       PetscInt d ! PetscInt
       integer z
       end subroutine
      subroutine KSPGetNormType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPNormType b ! KSPNormType
       integer z
       end subroutine
      subroutine KSPSetOperators(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       Mat b ! Mat
       Mat c ! Mat
       integer z
       end subroutine
      subroutine KSPGetOperators(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       Mat b ! Mat
       Mat c ! Mat
       integer z
       end subroutine
      subroutine KSPCreate(a,b,z)
      use petsckspdef
       integer a ! MPI_Comm
       KSP b ! KSP
       integer z
       end subroutine
      subroutine KSPGetResidualNorm(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPGetIterationNumber(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPGetTotalIterations(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPConvergedDefaultSetUIRNorm(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPConvergedDefaultSetUMIRNorm(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPGetConvergedReason(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPConvergedReason b ! KSPConvergedReason
       integer z
       end subroutine
      subroutine KSPSetDM(a,b,z)
      use petsckspdef
       KSP a ! KSP
       DM b ! DM
       integer z
       end subroutine
      subroutine KSPSetDMActive(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetDM(a,b,z)
      use petsckspdef
       KSP a ! KSP
       DM b ! DM
       integer z
       end subroutine
      subroutine KSPGuessSetFromOptions(a,z)
      use petsckspdef
       KSPGuess a ! KSPGuess
       integer z
       end subroutine
      subroutine KSPGuessDestroy(a,z)
      use petsckspdef
       KSPGuess a ! KSPGuess
       integer z
       end subroutine
      subroutine KSPGuessCreate(a,b,z)
      use petsckspdef
       integer a ! MPI_Comm
       KSPGuess b ! KSPGuess
       integer z
       end subroutine
      subroutine KSPGuessUpdate(a,b,c,z)
      use petsckspdef
       KSPGuess a ! KSPGuess
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine KSPGuessFormGuess(a,b,c,z)
      use petsckspdef
       KSPGuess a ! KSPGuess
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine KSPGuessSetUp(a,z)
      use petsckspdef
       KSPGuess a ! KSPGuess
       integer z
       end subroutine
      subroutine KSPComputeExtremeSingularValues(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       PetscReal c ! PetscReal
       integer z
       end subroutine
      subroutine KSPComputeEigenvalues(a,b,c,d,e,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       PetscReal c (*) ! PetscReal
       PetscReal d (*) ! PetscReal
       PetscInt e ! PetscInt
       integer z
       end subroutine
      subroutine KSPComputeRitz(a,b,c,d,e,f,g,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       PetscBool c ! PetscBool
       PetscInt d ! PetscInt
       Vec e (*) ! Vec
       PetscReal f (*) ! PetscReal
       PetscReal g (*) ! PetscReal
       integer z
       end subroutine
      subroutine KSPSetUpOnBlocks(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPSetReusePreconditioner(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetSkipPCSetFromOptions(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetUp(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPReasonView(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscViewer b ! PetscViewer
       integer z
       end subroutine
      subroutine KSPSolve(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine KSPSolveTranspose(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine KSPReset(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPDestroy(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPSetPCSide(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PCSide b ! PCSide
       integer z
       end subroutine
      subroutine KSPGetPCSide(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PCSide b ! PCSide
       integer z
       end subroutine
      subroutine KSPGetTolerances(a,b,c,d,e,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       PetscReal c ! PetscReal
       PetscReal d ! PetscReal
       PetscInt e ! PetscInt
       integer z
       end subroutine
      subroutine KSPSetTolerances(a,b,c,d,e,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       PetscReal c ! PetscReal
       PetscReal d ! PetscReal
       PetscInt e ! PetscInt
       integer z
       end subroutine
      subroutine KSPSetInitialGuessNonzero(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetInitialGuessNonzero(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetErrorIfNotConverged(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetErrorIfNotConverged(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetInitialGuessKnoll(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetInitialGuessKnoll(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetComputeSingularValues(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetComputeSingularValues(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetComputeEigenvalues(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetComputeEigenvalues(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetComputeRitz(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetRhs(a,b,z)
      use petsckspdef
       KSP a ! KSP
       Vec b ! Vec
       integer z
       end subroutine
      subroutine KSPGetSolution(a,b,z)
      use petsckspdef
       KSP a ! KSP
       Vec b ! Vec
       integer z
       end subroutine
      subroutine KSPSetPC(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PC b ! PC
       integer z
       end subroutine
      subroutine KSPGetPC(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PC b ! PC
       integer z
       end subroutine
      subroutine KSPMonitor(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       PetscReal c ! PetscReal
       integer z
       end subroutine
      subroutine KSPMonitorCancel(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPSetResidualHistory(a,b,c,d,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b (*) ! PetscReal
       PetscInt c ! PetscInt
       PetscBool d ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetDiagonalScale(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetDiagonalScale(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPSetDiagonalScaleFix(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGetDiagonalScaleFix(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPComputeExplicitOperator(a,b,z)
      use petsckspdef
       KSP a ! KSP
       Mat b ! Mat
       integer z
       end subroutine
      subroutine KSPComputeEigenvaluesExplicitly(a,b,c,d,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       PetscReal c (*) ! PetscReal
       PetscReal d (*) ! PetscReal
       integer z
       end subroutine
      subroutine MatLMVMUpdate(a,b,c,z)
      use petsckspdef
       Mat a ! Mat
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine MatLMVMClearJ0(a,z)
      use petsckspdef
       Mat a ! Mat
       integer z
       end subroutine
      subroutine MatLMVMSetJ0Scale(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine MatLMVMSetJ0Diag(a,b,z)
      use petsckspdef
       Mat a ! Mat
       Vec b ! Vec
       integer z
       end subroutine
      subroutine MatLMVMSetJ0(a,b,z)
      use petsckspdef
       Mat a ! Mat
       Mat b ! Mat
       integer z
       end subroutine
      subroutine MatLMVMSetJ0PC(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PC b ! PC
       integer z
       end subroutine
      subroutine MatLMVMSetJ0KSP(a,b,z)
      use petsckspdef
       Mat a ! Mat
       KSP b ! KSP
       integer z
       end subroutine
      subroutine MatLMVMGetJ0(a,b,z)
      use petsckspdef
       Mat a ! Mat
       Mat b ! Mat
       integer z
       end subroutine
      subroutine MatLMVMGetJ0PC(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PC b ! PC
       integer z
       end subroutine
      subroutine MatLMVMGetJ0KSP(a,b,z)
      use petsckspdef
       Mat a ! Mat
       KSP b ! KSP
       integer z
       end subroutine
      subroutine MatLMVMApplyJ0Fwd(a,b,c,z)
      use petsckspdef
       Mat a ! Mat
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine MatLMVMApplyJ0Inv(a,b,c,z)
      use petsckspdef
       Mat a ! Mat
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine MatLMVMIsAllocated(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine MatLMVMAllocate(a,b,c,z)
      use petsckspdef
       Mat a ! Mat
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
      subroutine MatLMVMResetShift(a,z)
      use petsckspdef
       Mat a ! Mat
       integer z
       end subroutine
      subroutine MatLMVMReset(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine MatLMVMGetUpdateCount(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine MatLMVMGetRejectCount(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine MatCreateLMVMBFGS(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine KSPRichardsonSetScale(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPRichardsonSetSelfScale(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPGMRESSetCGSRefinementType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPGMRESCGSRefinementType b ! KSPGMRESCGSRefinementType
       integer z
       end subroutine
      subroutine KSPGMRESGetCGSRefinementType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPGMRESCGSRefinementType b ! KSPGMRESCGSRefinementType
       integer z
       end subroutine
      subroutine KSPGMRESSetRestart(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPGMRESGetRestart(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPGMRESSetHapTol(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPGMRESSetPreAllocateVectors(a,z)
      use petsckspdef
       KSP a ! KSP
       integer z
       end subroutine
      subroutine KSPCGGLTRGetMinEig(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPCGGLTRGetLambda(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPGuessFischerSetModel(a,b,c,z)
      use petsckspdef
       KSPGuess a ! KSPGuess
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       integer z
       end subroutine
      subroutine KSPLSQRSetComputeStandardErrorVec(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPLSQRSetExactMatNorm(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPLSQRGetStandardErrorVec(a,b,z)
      use petsckspdef
       KSP a ! KSP
       Vec b ! Vec
       integer z
       end subroutine
      subroutine KSPLSQRGetNorms(a,b,c,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       PetscReal c ! PetscReal
       integer z
       end subroutine
      subroutine KSPPIPEFCGSetMmax(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEFCGGetMmax(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEFCGSetNprealloc(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEFCGGetNprealloc(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEFCGSetTruncationType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPFCDTruncationType b ! KSPFCDTruncationType
       integer z
       end subroutine
      subroutine KSPPIPEFCGGetTruncationType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPFCDTruncationType b ! KSPFCDTruncationType
       integer z
       end subroutine
      subroutine KSPBCGSLSetXRes(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscReal b ! PetscReal
       integer z
       end subroutine
      subroutine KSPBCGSLSetUsePseudoinverse(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPBCGSLSetPol(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPBCGSLSetEll(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine MatCreateLMVMBadBrdn(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine KSPPIPEGCRSetUnrollW(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPPIPEGCRGetUnrollW(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscBool b ! PetscBool
       integer z
       end subroutine
      subroutine KSPPIPEGCRSetMmax(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEGCRGetMmax(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEGCRSetNprealloc(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEGCRGetNprealloc(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPPIPEGCRSetTruncationType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPFCDTruncationType b ! KSPFCDTruncationType
       integer z
       end subroutine
      subroutine KSPPIPEGCRGetTruncationType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPFCDTruncationType b ! KSPFCDTruncationType
       integer z
       end subroutine
      subroutine MatCreateLMVMDFP(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine MatSymBrdnSetDelta(a,b,z)
      use petsckspdef
       Mat a ! Mat
       PetscScalar b ! PetscScalar
       integer z
       end subroutine
      subroutine MatCreateLMVMSymBrdn(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine MatCreateLMVMSymBadBrdn(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine MatCreateLMVMBrdn(a,b,c,d,z)
      use petsckspdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       Mat d ! Mat
       integer z
       end subroutine
      subroutine KSPFCGSetMmax(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPFCGGetMmax(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPFCGSetNprealloc(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPFCGGetNprealloc(a,b,z)
      use petsckspdef
       KSP a ! KSP
       PetscInt b ! PetscInt
       integer z
       end subroutine
      subroutine KSPFCGSetTruncationType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPFCDTruncationType b ! KSPFCDTruncationType
       integer z
       end subroutine
      subroutine KSPFCGGetTruncationType(a,b,z)
      use petsckspdef
       KSP a ! KSP
       KSPFCDTruncationType b ! KSPFCDTruncationType
       integer z
       end subroutine
      subroutine DMGlobalToLocalSolve(a,b,c,z)
      use petsckspdef
       DM a ! DM
       Vec b ! Vec
       Vec c ! Vec
       integer z
       end subroutine
