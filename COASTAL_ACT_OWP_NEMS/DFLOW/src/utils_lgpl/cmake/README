(WINDOWS ONLY:) CMake-GUI, see file "Readme-CMake-GUI.docx."



Compiling on Windows/Linux
==========================

0. Be sure that you have installed all prerequisites listed at https://oss.deltares.nl/web/delft3d/source-code#prerequisites,
   including CMake version 3.17 or higher. Make sure that CMake was added to the system variables Path. 
   (should be working automatically)
   LINUX ONLY: Additional dependencies:
   - NetCDF         is assumed to be available via PKG_CONFIG_PATH::netcdf
   - NetCDF_Fortran is assumed to be available via PKG_CONFIG_PATH::netcdf-fortran
   - Petsc          is assumed to be available via PKG_CONFIG_PATH::PETSc
   - Proj           is assumed to be available via PKG_CONFIG_PATH::proj
   - Metis          is assumed to be available via ENV-parameter METIS_DIR

0.5 (LINUX ONLY:)
    Execute:
    . ../src/setenv.sh intel21
    This performs all "module load" statements (and compiler definitions) needed

1. Create a target directory where the generated files should go to. 
   Recommendation: On the top level, next to subdirs "src" and "examples", create directory "build_<configuration>".

2. Open a command line screen, go into the target directory and execute the following statement:
   cmake <CMakeLists.txt location> -G "<Generator>" -A <Architecture> -B "<Target Directory>" -D CONFIGURATION_TYPE=<Configuration Type>

   where:
     <CMakeLists.txt location>   : The location to the main CMakeLists.txt location. 
                                   (e.g. ..\src\cmake)
     <Generator>                 : The generator to generate the solution for
                                   (e.g. "Visual Studio 15 2017", "Unix Makefiles")
     <Architecture>              : Architecture specification
                                   (e.g. x64, only needed/allowed on Windows)
     <Target Directory>          : The target directory define in step 1 and where the generated files should go
                                   (e.g. ".")
     <Configuration_Type>        : The configuration to generate the .sln for. Valid values are:
                                   "dflowfm" (default),             # configure D-Flow FM only
                                   "dimr",                          # configure DIMR      only
                                   "dflowfm_interacter",            # configure D-Flow FM (with Interacter) only
                                   "flow2d3d",                      # configure Delft3D4  only
                                   "dwaq",                          # configure D-WAQ     only
                                   "dwaves",                        # configure D-WAVES   only
                                   "all",                           # configure all configurations (except for TESTS)
                                   "tools",                         # configure TOOLS     only
                                   "tests"                          # configure TESTS     only
   Examples:
       WINDOWS: cmake ..\src\cmake -G "Visual Studio 16 2019" -A x64 -B "." -D CONFIGURATION_TYPE="dflowfm"
       LINUX  : cmake ../src/cmake -G "Unix Makefiles"               -B "." -D CONFIGURATION_TYPE="dflowfm" -D CMAKE_BUILD_TYPE=Release

3. WINDOWS
   - Open the generated .sln in the <Target Directory> in Visual Studio
   - Select the "solution configuration": "Release" or "Debug"
   - <Ctrl><Shift>B will compile the full solution (build artifacts will be gathered by the post-build script in the X64 folder)

3. LINUX
   - make VERBOSE=1 install





C code on Linux
===============
Use as an example: https://svn.oss.deltares.nl/repos/delft3d/trunk/src/engines_gpl/dimr/packages/dimr_lib/CMakeLists.txt:
Copy and adapt the following block into your CMakeLists.txt file:
>>>>>>>>>>>>>>>>>>>>>>>>
if (UNIX)
    #name mangling, these functions are generated by the FortranCInterface cmake package and might be system dependent
    include(FortranCInterface)
    FortranCInterface_HEADER("${CMAKE_CURRENT_SOURCE_DIR}/include/FortranCInterface.h" MACRO_NAMESPACE "FC_")
    #produce a config.h to be included
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake.in ${CMAKE_CURRENT_SOURCE_DIR}/include/config.h)  
    set(configFile "${CMAKE_CURRENT_SOURCE_DIR}/include/config.h") 
    
    include_directories(${NETCDF_INCLUDE_DIRS}) 
    add_definitions(-DD3D_PLUGIN_EXT=".so")
    add_definitions(-DHAVE_STRUCT_TIMESPEC)
endif(UNIX) 
<<<<<<<<<<<<<<<<<<<<<<<<<
This piece of code  produces a config.h file from a CMAKE template file. Make sure to copy the template file config.h.cmake.in into ${CMAKE_CURRENT_SOURCE_DIR}.
config.h includes FortranCInterface.h, which itself implements the name mangling functions (which are system dependent, but produced by CMAKE during the configuration step).
If those functions are used in the project you are compiling then you need to add "add_definitions(-D HAVE_CONFIG_H)", so that the HAVE_CONFIG_H variable is defined and the config.h file is included after the C preprocessing step.
