diff -uNrp fortran-csv-module/CMakeLists.txt fortran-csv-module-mods/CMakeLists.txt
--- fortran-csv-module/CMakeLists.txt	1969-12-31 18:00:00.000000000 -0600
+++ fortran-csv-module-mods/CMakeLists.txt	2020-12-21 16:28:15.464988546 -0600
@@ -0,0 +1,49 @@
+###########################################################################
+### CMake Build System for the Parametric Hurricane Model (PaHM)
+### CMakeLists.txt :: The top level CMake configuration file for fortran-csv-module
+###
+### Author: Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
+###########################################################################
+
+cmake_minimum_required(VERSION 3.2.3)
+
+project(fortran-csv-module
+        VERSION 1.2.0
+        LANGUAGES Fortran)
+
+massage(FATAL_ERROR "Error: fortran_csv_module should not be called, csv functionality is build from within the main src directory.")
+
+set(ENABLE_TESTS FALSE)
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
+### library to archive (libfortrancsv.a)
+set(_target_var fortrancsv)
+
+add_library(${_target_var} STATIC
+                           ${CMAKE_CURRENT_SOURCE_DIR}/src/csv_kinds.f90
+                           ${CMAKE_CURRENT_SOURCE_DIR}/src/csv_parameters.f90
+                           ${CMAKE_CURRENT_SOURCE_DIR}/src/csv_utilities.f90
+                           ${CMAKE_CURRENT_SOURCE_DIR}/src/csv_module.F90)
+
+set(_target_mod_dir "${CMAKE_Fortran_MODULE_DIRECTORY}")
+if("${_target_mod_dir}" STREQUAL "")
+  set(_target_mod_dir ${CMAKE_BINARY_DIR}/CMakeFiles/mod/${_target_var})
+endif()
+target_include_directories(${_target_var} INTERFACE ${_target_mod_dir})
+
+set_target_properties(${_target_var} PROPERTIES
+                                     Fortran_MODULE_DIRECTORY ${_target_mod_dir}
+                                     ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
+                                     LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
+
+install(TARGETS ${_target_var} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+                               ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+                               LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
+
+install(DIRECTORY "${_target_mod_dir}/"
+        DESTINATION "include"
+        FILES_MATCHING
+        PATTERN "*.mod")
+
+unset(_target_var)
+unset(_target_mod_dir)
diff -uNrp fortran-csv-module/src/csv_module.F90 fortran-csv-module-mods/src/csv_module.F90
--- fortran-csv-module/src/csv_module.F90	2019-10-14 20:58:52.000000000 -0500
+++ fortran-csv-module-mods/src/csv_module.F90	2020-12-21 09:18:44.398880696 -0600
@@ -47,8 +47,8 @@
         character(len=1) :: delimiter = ','  !! delimiter character
 
         ! for reading a csv file:
-        integer :: n_rows = 0  !! number of rows in the file
-        integer :: n_cols = 0  !! number of columns in the file
+        integer,public :: n_rows = 0  !! number of rows in the file
+        integer,public :: n_cols = 0  !! number of columns in the file
         integer :: chunk_size = 100 !! for expanding vectors
         type(csv_string),dimension(:),allocatable :: header      !! the header
         type(csv_string),dimension(:,:),allocatable :: csv_data  !! the data in the file
@@ -208,6 +208,7 @@
     integer,dimension(:),intent(in),optional :: skip_rows  !! rows to skip
 
     type(csv_string),dimension(:),allocatable :: row_data  !! a tokenized row
+    type(csv_string) :: empty_data
     integer,dimension(:),allocatable :: rows_to_skip  !! the actual rows to skip
     character(len=:),allocatable :: line  !! a line from the file
     integer :: i                !! counter
@@ -217,6 +218,7 @@
     integer :: n_rows           !! number of rows in the output data matrix
     integer :: n_cols           !! number of columns in the file (and output data matrix)
     integer :: istat            !! open status flag
+    integer :: line_n_cols      !! number of columns in the line (not necessarily equal to n_cols)
     integer :: iunit            !! open file unit
     logical :: arrays_allocated !! if the arrays in the
                                 !! class have been allocated
@@ -224,6 +226,8 @@
                                 !! (0 if no header specified)
     character(len=1) :: tmp     !! for skipping a row
 
+    empty_data%str = ' '
+        
     call me%destroy()
     arrays_allocated = .false.
 
@@ -254,6 +258,23 @@
 
         ! we don't know the number of columns
         ! until we parse the first row (or the header)
+        ! Panagiotis Velissariou: some csv files do not have the same number
+        ! of columns, so we need to determine the nax number of columns
+        ! for the allocation of the arrays
+        !--- PV
+        n_cols = 0
+        do i=1,n_rows_in_file  !! rows in the file
+          call me%read_line_from_file(iunit,line,status_ok)
+          call me%tokenize(line,row_data)
+          n_cols = max(n_cols,size(row_data))
+        end do
+        rewind(iunit)
+
+        me%n_cols = n_cols
+        allocate(me%csv_data(n_rows,n_cols))
+        if (iheader/=0) allocate(me%header(n_cols))
+        arrays_allocated = .true.
+        !--- PV
 
         !read each line in the file, parse it, and populate data
         irow = 0
@@ -277,18 +298,7 @@
             call me%read_line_from_file(iunit,line,status_ok)
             if (.not. status_ok) return ! file read error
             call me%tokenize(line,row_data)
-
-            if (.not. arrays_allocated) then
-                ! note: the number of columns is obtained
-                ! from the first one read. It is assumed
-                ! that each row has the same number of
-                ! columns.
-                n_cols = size(row_data)
-                me%n_cols = n_cols
-                allocate(me%csv_data(n_rows,n_cols))
-                if (iheader/=0) allocate(me%header(n_cols))
-                arrays_allocated = .true.
-            end if
+            line_n_cols = size(row_data)
 
             if (i==iheader) then
                 do j=1,me%n_cols
@@ -297,7 +307,11 @@
             else
                 irow = irow + 1  !! row counter in data array
                 do j=1,n_cols
-                    me%csv_data(irow,j) = row_data(j) !%str
+                    if(j <= line_n_cols) then
+                      me%csv_data(irow,j) = row_data(j) !%str
+                    else
+                      me%csv_data(irow,j) = empty_data !%str
+                    end if
                 end do
             end if
 
diff -uNrp fortran-csv-module/src/csv_utilities.f90 fortran-csv-module-mods/src/csv_utilities.f90
--- fortran-csv-module/src/csv_utilities.f90	2019-10-14 20:58:52.000000000 -0500
+++ fortran-csv-module-mods/src/csv_utilities.f90	2020-12-21 09:18:44.398880696 -0600
@@ -12,13 +12,11 @@
 
     integer,parameter :: max_size_for_insertion_sort = 20 !! max size for using insertion sort.
 
-    character(len=*),parameter :: upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' !! uppercase characters
-    character(len=*),parameter :: lower = 'abcdefghijklmnopqrstuvwxyz' !! lowercase characters
-
     public :: unique
     public :: expand_vector
     public :: sort_ascending
     public :: lowercase_string
+    public :: uppercase_string
 
     contains
 !*******************************************************************************
@@ -211,51 +209,63 @@
     end subroutine swap
 !*******************************************************************************
 
-!*****************************************************************************************
-!> author: Jacob Williams
-!
-!  Return the lowercase version of the character.
+!*******************************************************************************
+  !----------------------------------------------------------------
+  !  author Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
+  !>
+  !> Convert a string to lower-case
+  !----------------------------------------------------------------
+  PURE ELEMENTAL FUNCTION lowercase_string(inpString) RESULT(outString)
 
-    pure elemental function lowercase_character(c) result(c_lower)
+    IMPLICIT NONE
 
-    implicit none
+    CHARACTER(*), INTENT(IN)  :: inpString
 
-    character(len=1),intent(in) :: c
-    character(len=1)            :: c_lower
+    INTEGER, PARAMETER        :: DUC = ICHAR('A') - ICHAR('a')
+    CHARACTER(LEN(inpString)) :: outString
+    CHARACTER                 :: ch
+    INTEGER                   :: i
 
-    integer :: i  !! index in uppercase array
+    DO i = 1, LEN(inpString)
+      ch = inpString(i:i)
+      IF ((ch >= 'A') .AND. (ch <= 'Z')) ch = CHAR(ICHAR(ch) - DUC)
+      outString(i:i) = ch
+    END DO
 
-    i = index(upper,c)
-    c_lower = merge(lower(i:i),c,i>0)
-
-    end function lowercase_character
-!*****************************************************************************************
+    RETURN
 
+  END FUNCTION lowercase_string
 !*******************************************************************************
-!>
-!  Returns lowercase version of the string.
 
-    pure elemental function lowercase_string(str) result(s_lower)
+!*******************************************************************************
+  !----------------------------------------------------------------
+  !> Convert a string to upper-case
+  !----------------------------------------------------------------
+  !  author Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
+  !>
+  !> Convert a string to lower-case
+  !----------------------------------------------------------------
+  PURE ELEMENTAL FUNCTION uppercase_string(inpString) RESULT(outString)
 
-    implicit none
+    IMPLICIT NONE
 
-    character(len=*),intent(in) :: str      !! input string
-    character(len=(len(str)))   :: s_lower  !! lowercase version of the string
+    CHARACTER(*), INTENT(IN)  :: inpString
 
-    integer :: i  !! counter
-    integer :: n  !! length of input string
+    INTEGER, PARAMETER        :: DUC = ICHAR('A') - ICHAR('a')
+    CHARACTER(LEN(inpString)) :: outString
+    CHARACTER                 :: ch
+    INTEGER                   :: i
 
-    s_lower = ''
-    n = len_trim(str)
+    DO i = 1, LEN(inpString)
+      ch = inpString(i:i)
+      IF ((ch >= 'a') .AND. (ch <= 'z')) ch = CHAR(ICHAR(ch) + DUC)
+      outString(i:i) = ch
+    END DO
 
-    if (n>0) then
-        do concurrent (i=1:n)
-            s_lower(i:i) = lowercase_character(str(i:i))
-        end do
-    end if
+    RETURN
 
-    end function lowercase_string
-!*******************************************************************************
+  END FUNCTION uppercase_string
+  !*******************************************************************************
 
 !*******************************************************************************
     end module csv_utilities
