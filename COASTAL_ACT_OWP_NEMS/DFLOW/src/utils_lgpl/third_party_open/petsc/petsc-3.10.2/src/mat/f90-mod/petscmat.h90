

! rename MAT_INFO_SIZE and MAT_FACTORINFO_SIZE to enable reuse here
#define MAT_INFO_SIZE MAT_INFO_SIZE_MOD
#define MAT_FACTORINFO_SIZE MAT_FACTORINFO_SIZE_MOD
      Interface
        Subroutine MatFDColoringGetPerturbedColumnsF90(i,array,ierr)
          use petscmatdef
          PetscInt, pointer :: array(:)
          PetscErrorCode  ierr
         MatFDColoring       i
        End Subroutine
      End Interface


      Interface
        Subroutine MatFDColoringRestorePerturbedColumnsF90(i,array,ierr)
          use petscmatdef
          PetscInt, pointer :: array(:)
          PetscErrorCode ierr
         MatFDColoring      i
        End Subroutine
      End Interface

      Interface
      subroutine MatCreateMPIAIJWithSplitArrays(a,b,c,d,e,f,g,h,i,j,k,l,&
     &z)
       use petscmatdef
       integer a ! MPI_Comm
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscInt d ! PetscInt
       PetscInt e ! PetscInt
       PetscInt f (*) ! PetscInt
       PetscInt g (*) ! PetscInt
       PetscScalar h (*) ! PetscScalar
       PetscInt i (*) ! PetscInt
       PetscInt j (*) ! PetscInt
       PetscScalar k (*) ! PetscScalar
       Mat l ! Mat
       integer z
       end subroutine
      End Interface

      interface MatNullSpaceCreate
      subroutine MatNullSpaceCreate1(a,b,c,d,e,z)
      use petscmatdef
       integer a
       PetscBool b
       PetscInt c
       Vec d (*)
       MatNullSpace e
       integer z
       end subroutine
      subroutine MatNullSpaceCreate0(a,b,c,d,e,z)
      use petscmatdef
       integer a
       PetscBool b
       PetscInt c
       Vec d
       MatNullSpace e
       integer z
       end subroutine
      end interface

      interface MatGetSize
      subroutine MatGetSize00(a,b,c,z)
      use petscmatdef
       Mat a
       PetscInt b
       PetscInt c
       integer z
       end subroutine
      subroutine MatGetSize10(a,b,c,z)
      use petscmatdef
       Mat a
       PetscInt b(*)
       PetscInt c
       integer z
       end subroutine
      subroutine MatGetSize01(a,b,c,z)
      use petscmatdef
       Mat a
       PetscInt b
       PetscInt c(*)
       integer z
       end subroutine
      end interface

      interface MatGetLocalSize
      subroutine MatGetLocalSize00(a,b,c,z)
      use petscmatdef
       Mat a
       PetscInt b
       PetscInt c
       integer z
       end subroutine
      subroutine MatGetLocalSize10(a,b,c,z)
      use petscmatdef
       Mat a
       PetscInt b(*)
       PetscInt c
       integer z
       end subroutine
      subroutine MatGetLocalSize01(a,b,c,z)
      use petscmatdef
       Mat a
       PetscInt b
       PetscInt c(*)
       integer z
       end subroutine
       end interface

        Interface
        subroutine MatCreateMPIAIJ(a,b,c,d,e,f,g,h,i,j,z)
          use petscmatdef
          MPI_Comm a
          PetscInt b
          PetscInt c
          PetscInt d
          PetscInt e
          PetscInt f
          PetscInt g (*)
          PetscInt h
          PetscInt i (*)
          Mat j
          integer z
        end subroutine

        subroutine MatCreateSeqAIJ(a,b,c,d,e,f,z)
          use petscmatdef
          MPI_Comm a
          PetscInt b
          PetscInt c
          PetscInt d
          PetscInt e(*)
          Mat f
          integer z
        end subroutine

        subroutine MatSeqAIJSetPreallocation(a,b,c,z)
          use petscmatdef
          Mat a
          PetscInt b
          PetscInt c(*)
          integer z
        end subroutine

        subroutine MatMPIAIJSetPreallocation(a,b,c,d,e,z)
          use petscmatdef
          Mat a
          PetscInt b
          PetscInt c(*)
          PetscInt d
          PetscInt e(*)
          integer z
        end subroutine

        subroutine MatXAIJSetPreallocationb(a,b,c,d,e,f,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d (*) ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscInt f (*) ! PetscInt
          integer z
        end subroutine
        end interface

        Interface MatSetValues
        ! picky Fortran requires seperate prototypes if args
        ! are arrays or scalars
        subroutine MatSetValues0(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesnn1(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesnnnn(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f(1,1)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValues11(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValues1n(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesn1(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
      End Interface MatSetValues

      Interface MatSetValuesLocal
        ! picky Fortran requires seperate prototypes if args
        ! are arrays or scalars
        subroutine MatSetValuesLocal0(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesLocal11(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f(*)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesLocal11nn(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f(1,1)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesLocal111(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesLocal1n(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesLocaln1(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
      End Interface MatSetValuesLocal

      Interface MatSetValuesBlockedLocal
        ! picky Fortran requires seperate prototypes if args
        ! are arrays or scalars
        subroutine MatSetValuesBlockedLocal0(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlockedLocal11(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f(*)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlockedLocal111(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f(1,1)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlockedLocal1n(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlockedLocaln1(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
      End Interface MatSetValuesBlockedLocal

      Interface MatSetValuesBlocked
        ! picky Fortran requires seperate prototypes if args
        ! are arrays or scalars
        subroutine MatSetValuesBlocked2(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar, pointer :: f (:,:)
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlocked0(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlocked11(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f(*)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlocked111(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f(1,1)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlocked1n(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat a ! Mat
          PetscInt b ! PetscInt
          PetscInt c ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e (*) ! PetscInt
          PetscScalar f (*)  ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
        subroutine MatSetValuesBlockedn1(a,b,c,d,e,f,g,z)
          use petscmatdef
          Mat xa ! Mat
          PetscInt b ! PetscInt
          PetscInt c (*) ! PetscInt
          PetscInt d ! PetscInt
          PetscInt e ! PetscInt
          PetscScalar f (*) ! PetscScalar
          InsertMode g ! InsertMode
          integer z
        end subroutine
      End Interface MatSetValuesBlocked

      Interface
        Subroutine MatGetRow(v,row,ncols,cols,vals,ierr)
          use petscmatdef
          PetscInt cols(*)
          PetscInt  row,ncols
          PetscScalar vals(*)
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface

      Interface
        Subroutine MatRestoreRow(v,row,ncols,cols,vals,ierr)
          use petscmatdef
          PetscInt  cols(*)
          PetscInt  row,ncols
          PetscScalar vals(*)
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface

      Interface
        Subroutine MatGetRowIJF90(v,sh,sym,bl,n,ia,ja,d,ierr)
          use petscmatdef
          PetscInt, pointer :: ia(:), ja(:)
          PetscInt  n,sh
          PetscBool  sym,bl,d
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface

      Interface
        Subroutine MatRestoreRowIJF90(v,s,sy,b,n,ia,ja,d,ierr)
          use petscmatdef
          PetscInt, pointer :: ia(:), ja(:)
          PetscInt  n,s
          PetscBool  sy,b,d
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface

      Interface
        Subroutine MatDenseGetArrayF90(v,array,ierr)
          use petscmatdef
          PetscScalar, pointer :: array(:,:)
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface


      Interface
        Subroutine MatDenseRestoreArrayF90(v,array,ierr)
          use petscmatdef
          PetscScalar, pointer :: array(:,:)
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface

      Interface
        Subroutine MatSeqAIJGetArrayF90(v,array,ierr)
          use petscmatdef
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface


      Interface
        Subroutine MatSeqAIJRestoreArrayF90(v,array,ierr)
          use petscmatdef
          PetscScalar, pointer :: array(:)
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface

      Interface
        Subroutine MatGetGhostsF90(v,array,ierr)
          use petscmatdef
          PetscInt, pointer :: array(:)
          PetscErrorCode ierr
          Mat     v
        End Subroutine
      End Interface

      Interface
         Subroutine MatGetInfo(v, flag, info ,ierr)
         use petscmatdef
         Mat  v
         MatInfoType flag
#include "../src/mat/f90-mod/petscmatinfosize.h"
         MatInfo info(MAT_INFO_SIZE)
         PetscErrorCode ierr
       End Subroutine
      End Interface

      Interface
         subroutine MatLUFactor(v, row, col, info ,ierr)
         use petscmatdef
         Mat  v
         IS row
         IS col
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatILUFactor(v, row, col, info ,ierr)
         use petscmatdef
         Mat  v
         IS row
         IS col
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatLUFactorSymbolic(fact, v, row, col, info ,ierr)
         use petscmatdef
         Mat  fact
         Mat  v
         IS row
         IS col
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatLUFactorNumeric(fact, v, info ,ierr)
         use petscmatdef
         Mat  fact
         Mat  v
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatCholeskyFactor(v, perm, info ,ierr)
         use petscmatdef
         Mat  v
         IS perm
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatCholeskyFactorSymbolic(fact,v,perm,info,ierr)
         use petscmatdef
         Mat  fact
         Mat  v
         IS perm
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatCholeskyFactorNumeric(fact, v, info ,ierr)
         use petscmatdef
         Mat  fact
         Mat  v
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatILUFactorSymbolic(fact,v,row,col,info,ierr)
         use petscmatdef
         Mat  fact
         Mat  v
         IS row
         IS col
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatICCFactorSymbolic(fact, v, perm, info ,ierr)
         use petscmatdef
         Mat  fact
         Mat  v
         IS perm
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatICCFactor(v, row, info ,ierr)
         use petscmatdef
         Mat  v
         IS row
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatGetGetNullSpace(A,n,ierr)
         use petscmatdef
         Mat  A
         MatNullSpace n
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
         subroutine MatFactorInfoInitialize(info ,ierr)
#include "../src/mat/f90-mod/petscmatfactorinfosize.h"
         MatFactorInfo info(MAT_FACTORINFO_SIZE)
         PetscErrorCode ierr
         end subroutine
      End Interface

      Interface
      subroutine MatSetType(a,b,z)
      use petscmatdef
       Mat a
       character(*) b
       integer z
       end subroutine
      end Interface

      Interface
      subroutine MatView(a,b,z)
      use petscmatdef
       Mat a
       PetscViewer b
       integer z
       end subroutine
      end Interface

      Interface MatZeroRowsLocal
      subroutine MatZeroRowsLocal0(a,b,c,d,e,f,z)
      use petscmatdef
       Mat a ! Mat
       PetscInt b ! PetscInt
       PetscInt c (*) ! PetscInt
       PetscScalar d ! PetscScalar
       Vec e ! Vec
       Vec f ! Vec
       integer z
       end subroutine
      subroutine MatZeroRowsLocal1(a,b,c,d,e,f,z)
      use petscmatdef
       Mat a ! Mat
       PetscInt b ! PetscInt
       PetscInt c ! PetscInt
       PetscScalar d ! PetscScalar
       Vec e ! Vec
       Vec f ! Vec
       integer z
       end subroutine
      End Interface

! revert MAT_INFO_SIZE and MAT_FACTORINFO_SIZE defines
#undef MAT_INFO_SIZE
#undef MAT_FACTORINFO_SIZE

